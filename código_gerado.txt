// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etl_relatorio_transacional.teste_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Teste Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Teste implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Teste";
	private final String projectName = "ETL_RELATORIO_TRANSACIONAL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Teste.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Teste.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputJSON_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[0];
		static byte[] commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[0];

		public String Institui__o_financeira;

		public String getInstitui__o_financeira() {
			return this.Institui__o_financeira;
		}

		public Integer C_digo;

		public Integer getC_digo() {
			return this.C_digo;
		}

		public String Conglomerado;

		public String getConglomerado() {
			return this.Conglomerado;
		}

		public Integer Conglomerado_Financeiro;

		public Integer getConglomerado_Financeiro() {
			return this.Conglomerado_Financeiro;
		}

		public Integer Conglomerado_Prudencial;

		public Integer getConglomerado_Prudencial() {
			return this.Conglomerado_Prudencial;
		}

		public String TCB;

		public String getTCB() {
			return this.TCB;
		}

		public Integer TC;

		public Integer getTC() {
			return this.TC;
		}

		public Integer TI;

		public Integer getTI() {
			return this.TI;
		}

		public String Cidade;

		public String getCidade() {
			return this.Cidade;
		}

		public String UF;

		public String getUF() {
			return this.UF;
		}

		public String Data;

		public String getData() {
			return this.Data;
		}

		public String Disponibilidades__a_;

		public String getDisponibilidades__a_() {
			return this.Disponibilidades__a_;
		}

		public String Aplica__es_Interfinanceiras_de_Liquidez__b_;

		public String getAplica__es_Interfinanceiras_de_Liquidez__b_() {
			return this.Aplica__es_Interfinanceiras_de_Liquidez__b_;
		}

		public String TVM_e_Instrumentos_Financeiros_Derivativos__c_;

		public String getTVM_e_Instrumentos_Financeiros_Derivativos__c_() {
			return this.TVM_e_Instrumentos_Financeiros_Derivativos__c_;
		}

		public String Opera__es_de_Cr_dito;

		public String getOpera__es_de_Cr_dito() {
			return this.Opera__es_de_Cr_dito;
		}

		public String Provis_o_sobre_Opera__es_de_Cr_dito__d2_;

		public String getProvis_o_sobre_Opera__es_de_Cr_dito__d2_() {
			return this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_;
		}

		public String Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_;

		public String getOpera__es_de_Cr_dito_L_quidas_de_Provis_o__d_() {
			return this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_;
		}

		public String Arrendamento_Mercantil;

		public String getArrendamento_Mercantil() {
			return this.Arrendamento_Mercantil;
		}

		public String Imobilizado_de_Arrendamento__e2_;

		public String getImobilizado_de_Arrendamento__e2_() {
			return this.Imobilizado_de_Arrendamento__e2_;
		}

		public String Credores_por_Antecipa__o_de_Valor_Residual__e3_;

		public String getCredores_por_Antecipa__o_de_Valor_Residual__e3_() {
			return this.Credores_por_Antecipa__o_de_Valor_Residual__e3_;
		}

		public String Provis_o_sobre_Arrendamento_Mercantil__e4_;

		public String getProvis_o_sobre_Arrendamento_Mercantil__e4_() {
			return this.Provis_o_sobre_Arrendamento_Mercantil__e4_;
		}

		public String Arrendamento_Mercantil_L_quido_de_Provis_o__e_;

		public String getArrendamento_Mercantil_L_quido_de_Provis_o__e_() {
			return this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_;
		}

		public String Outros_Cr_ditos___L_quido_de_Provis_o__f_;

		public String getOutros_Cr_ditos___L_quido_de_Provis_o__f_() {
			return this.Outros_Cr_ditos___L_quido_de_Provis_o__f_;
		}

		public String Outros_Ativos_Realiz_veis__g_;

		public String getOutros_Ativos_Realiz_veis__g_() {
			return this.Outros_Ativos_Realiz_veis__g_;
		}

		public String Permanente_Ajustado__h_;

		public String getPermanente_Ajustado__h_() {
			return this.Permanente_Ajustado__h_;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Credores_por_Antecipa__o_de_Valor_Residual__j_;

		public String getCredores_por_Antecipa__o_de_Valor_Residual__j_() {
			return this.Credores_por_Antecipa__o_de_Valor_Residual__j_;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste.length) {
					if (length < 1024 && commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste.length == 0) {
						commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[1024];
					} else {
						commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste, 0, length);
				strReturn = new String(commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_RELATORIO_TRANSACIONAL_Teste) {

				try {

					int length = 0;

					this.Institui__o_financeira = readString(dis);

					this.C_digo = readInteger(dis);

					this.Conglomerado = readString(dis);

					this.Conglomerado_Financeiro = readInteger(dis);

					this.Conglomerado_Prudencial = readInteger(dis);

					this.TCB = readString(dis);

					this.TC = readInteger(dis);

					this.TI = readInteger(dis);

					this.Cidade = readString(dis);

					this.UF = readString(dis);

					this.Data = readString(dis);

					this.Disponibilidades__a_ = readString(dis);

					this.Aplica__es_Interfinanceiras_de_Liquidez__b_ = readString(dis);

					this.TVM_e_Instrumentos_Financeiros_Derivativos__c_ = readString(dis);

					this.Opera__es_de_Cr_dito = readString(dis);

					this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_ = readString(dis);

					this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_ = readString(dis);

					this.Arrendamento_Mercantil = readString(dis);

					this.Imobilizado_de_Arrendamento__e2_ = readString(dis);

					this.Credores_por_Antecipa__o_de_Valor_Residual__e3_ = readString(dis);

					this.Provis_o_sobre_Arrendamento_Mercantil__e4_ = readString(dis);

					this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_ = readString(dis);

					this.Outros_Cr_ditos___L_quido_de_Provis_o__f_ = readString(dis);

					this.Outros_Ativos_Realiz_veis__g_ = readString(dis);

					this.Permanente_Ajustado__h_ = readString(dis);

					this.Column25 = readString(dis);

					this.Credores_por_Antecipa__o_de_Valor_Residual__j_ = readString(dis);

					this.Column27 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Institui__o_financeira, dos);

				// Integer

				writeInteger(this.C_digo, dos);

				// String

				writeString(this.Conglomerado, dos);

				// Integer

				writeInteger(this.Conglomerado_Financeiro, dos);

				// Integer

				writeInteger(this.Conglomerado_Prudencial, dos);

				// String

				writeString(this.TCB, dos);

				// Integer

				writeInteger(this.TC, dos);

				// Integer

				writeInteger(this.TI, dos);

				// String

				writeString(this.Cidade, dos);

				// String

				writeString(this.UF, dos);

				// String

				writeString(this.Data, dos);

				// String

				writeString(this.Disponibilidades__a_, dos);

				// String

				writeString(this.Aplica__es_Interfinanceiras_de_Liquidez__b_, dos);

				// String

				writeString(this.TVM_e_Instrumentos_Financeiros_Derivativos__c_, dos);

				// String

				writeString(this.Opera__es_de_Cr_dito, dos);

				// String

				writeString(this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_, dos);

				// String

				writeString(this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_, dos);

				// String

				writeString(this.Arrendamento_Mercantil, dos);

				// String

				writeString(this.Imobilizado_de_Arrendamento__e2_, dos);

				// String

				writeString(this.Credores_por_Antecipa__o_de_Valor_Residual__e3_, dos);

				// String

				writeString(this.Provis_o_sobre_Arrendamento_Mercantil__e4_, dos);

				// String

				writeString(this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_, dos);

				// String

				writeString(this.Outros_Cr_ditos___L_quido_de_Provis_o__f_, dos);

				// String

				writeString(this.Outros_Ativos_Realiz_veis__g_, dos);

				// String

				writeString(this.Permanente_Ajustado__h_, dos);

				// String

				writeString(this.Column25, dos);

				// String

				writeString(this.Credores_por_Antecipa__o_de_Valor_Residual__j_, dos);

				// String

				writeString(this.Column27, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Institui__o_financeira=" + Institui__o_financeira);
			sb.append(",C_digo=" + String.valueOf(C_digo));
			sb.append(",Conglomerado=" + Conglomerado);
			sb.append(",Conglomerado_Financeiro=" + String.valueOf(Conglomerado_Financeiro));
			sb.append(",Conglomerado_Prudencial=" + String.valueOf(Conglomerado_Prudencial));
			sb.append(",TCB=" + TCB);
			sb.append(",TC=" + String.valueOf(TC));
			sb.append(",TI=" + String.valueOf(TI));
			sb.append(",Cidade=" + Cidade);
			sb.append(",UF=" + UF);
			sb.append(",Data=" + Data);
			sb.append(",Disponibilidades__a_=" + Disponibilidades__a_);
			sb.append(",Aplica__es_Interfinanceiras_de_Liquidez__b_=" + Aplica__es_Interfinanceiras_de_Liquidez__b_);
			sb.append(",TVM_e_Instrumentos_Financeiros_Derivativos__c_="
					+ TVM_e_Instrumentos_Financeiros_Derivativos__c_);
			sb.append(",Opera__es_de_Cr_dito=" + Opera__es_de_Cr_dito);
			sb.append(",Provis_o_sobre_Opera__es_de_Cr_dito__d2_=" + Provis_o_sobre_Opera__es_de_Cr_dito__d2_);
			sb.append(
					",Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_=" + Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_);
			sb.append(",Arrendamento_Mercantil=" + Arrendamento_Mercantil);
			sb.append(",Imobilizado_de_Arrendamento__e2_=" + Imobilizado_de_Arrendamento__e2_);
			sb.append(",Credores_por_Antecipa__o_de_Valor_Residual__e3_="
					+ Credores_por_Antecipa__o_de_Valor_Residual__e3_);
			sb.append(",Provis_o_sobre_Arrendamento_Mercantil__e4_=" + Provis_o_sobre_Arrendamento_Mercantil__e4_);
			sb.append(",Arrendamento_Mercantil_L_quido_de_Provis_o__e_="
					+ Arrendamento_Mercantil_L_quido_de_Provis_o__e_);
			sb.append(",Outros_Cr_ditos___L_quido_de_Provis_o__f_=" + Outros_Cr_ditos___L_quido_de_Provis_o__f_);
			sb.append(",Outros_Ativos_Realiz_veis__g_=" + Outros_Ativos_Realiz_veis__g_);
			sb.append(",Permanente_Ajustado__h_=" + Permanente_Ajustado__h_);
			sb.append(",Column25=" + Column25);
			sb.append(",Credores_por_Antecipa__o_de_Valor_Residual__j_="
					+ Credores_por_Antecipa__o_de_Valor_Residual__j_);
			sb.append(",Column27=" + Column27);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[0];
		static byte[] commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[0];

		public String Institui__o_financeira;

		public String getInstitui__o_financeira() {
			return this.Institui__o_financeira;
		}

		public Integer C_digo;

		public Integer getC_digo() {
			return this.C_digo;
		}

		public String Conglomerado;

		public String getConglomerado() {
			return this.Conglomerado;
		}

		public Integer Conglomerado_Financeiro;

		public Integer getConglomerado_Financeiro() {
			return this.Conglomerado_Financeiro;
		}

		public Integer Conglomerado_Prudencial;

		public Integer getConglomerado_Prudencial() {
			return this.Conglomerado_Prudencial;
		}

		public String TCB;

		public String getTCB() {
			return this.TCB;
		}

		public Integer TC;

		public Integer getTC() {
			return this.TC;
		}

		public Integer TI;

		public Integer getTI() {
			return this.TI;
		}

		public String Cidade;

		public String getCidade() {
			return this.Cidade;
		}

		public String UF;

		public String getUF() {
			return this.UF;
		}

		public String Data;

		public String getData() {
			return this.Data;
		}

		public String Disponibilidades__a_;

		public String getDisponibilidades__a_() {
			return this.Disponibilidades__a_;
		}

		public String Aplica__es_Interfinanceiras_de_Liquidez__b_;

		public String getAplica__es_Interfinanceiras_de_Liquidez__b_() {
			return this.Aplica__es_Interfinanceiras_de_Liquidez__b_;
		}

		public String TVM_e_Instrumentos_Financeiros_Derivativos__c_;

		public String getTVM_e_Instrumentos_Financeiros_Derivativos__c_() {
			return this.TVM_e_Instrumentos_Financeiros_Derivativos__c_;
		}

		public String Opera__es_de_Cr_dito;

		public String getOpera__es_de_Cr_dito() {
			return this.Opera__es_de_Cr_dito;
		}

		public String Provis_o_sobre_Opera__es_de_Cr_dito__d2_;

		public String getProvis_o_sobre_Opera__es_de_Cr_dito__d2_() {
			return this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_;
		}

		public String Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_;

		public String getOpera__es_de_Cr_dito_L_quidas_de_Provis_o__d_() {
			return this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_;
		}

		public String Arrendamento_Mercantil;

		public String getArrendamento_Mercantil() {
			return this.Arrendamento_Mercantil;
		}

		public String Imobilizado_de_Arrendamento__e2_;

		public String getImobilizado_de_Arrendamento__e2_() {
			return this.Imobilizado_de_Arrendamento__e2_;
		}

		public String Credores_por_Antecipa__o_de_Valor_Residual__e3_;

		public String getCredores_por_Antecipa__o_de_Valor_Residual__e3_() {
			return this.Credores_por_Antecipa__o_de_Valor_Residual__e3_;
		}

		public String Provis_o_sobre_Arrendamento_Mercantil__e4_;

		public String getProvis_o_sobre_Arrendamento_Mercantil__e4_() {
			return this.Provis_o_sobre_Arrendamento_Mercantil__e4_;
		}

		public String Arrendamento_Mercantil_L_quido_de_Provis_o__e_;

		public String getArrendamento_Mercantil_L_quido_de_Provis_o__e_() {
			return this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_;
		}

		public String Outros_Cr_ditos___L_quido_de_Provis_o__f_;

		public String getOutros_Cr_ditos___L_quido_de_Provis_o__f_() {
			return this.Outros_Cr_ditos___L_quido_de_Provis_o__f_;
		}

		public String Outros_Ativos_Realiz_veis__g_;

		public String getOutros_Ativos_Realiz_veis__g_() {
			return this.Outros_Ativos_Realiz_veis__g_;
		}

		public String Permanente_Ajustado__h_;

		public String getPermanente_Ajustado__h_() {
			return this.Permanente_Ajustado__h_;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Credores_por_Antecipa__o_de_Valor_Residual__j_;

		public String getCredores_por_Antecipa__o_de_Valor_Residual__j_() {
			return this.Credores_por_Antecipa__o_de_Valor_Residual__j_;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste.length) {
					if (length < 1024 && commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste.length == 0) {
						commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[1024];
					} else {
						commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste, 0, length);
				strReturn = new String(commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_RELATORIO_TRANSACIONAL_Teste) {

				try {

					int length = 0;

					this.Institui__o_financeira = readString(dis);

					this.C_digo = readInteger(dis);

					this.Conglomerado = readString(dis);

					this.Conglomerado_Financeiro = readInteger(dis);

					this.Conglomerado_Prudencial = readInteger(dis);

					this.TCB = readString(dis);

					this.TC = readInteger(dis);

					this.TI = readInteger(dis);

					this.Cidade = readString(dis);

					this.UF = readString(dis);

					this.Data = readString(dis);

					this.Disponibilidades__a_ = readString(dis);

					this.Aplica__es_Interfinanceiras_de_Liquidez__b_ = readString(dis);

					this.TVM_e_Instrumentos_Financeiros_Derivativos__c_ = readString(dis);

					this.Opera__es_de_Cr_dito = readString(dis);

					this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_ = readString(dis);

					this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_ = readString(dis);

					this.Arrendamento_Mercantil = readString(dis);

					this.Imobilizado_de_Arrendamento__e2_ = readString(dis);

					this.Credores_por_Antecipa__o_de_Valor_Residual__e3_ = readString(dis);

					this.Provis_o_sobre_Arrendamento_Mercantil__e4_ = readString(dis);

					this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_ = readString(dis);

					this.Outros_Cr_ditos___L_quido_de_Provis_o__f_ = readString(dis);

					this.Outros_Ativos_Realiz_veis__g_ = readString(dis);

					this.Permanente_Ajustado__h_ = readString(dis);

					this.Column25 = readString(dis);

					this.Credores_por_Antecipa__o_de_Valor_Residual__j_ = readString(dis);

					this.Column27 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Institui__o_financeira, dos);

				// Integer

				writeInteger(this.C_digo, dos);

				// String

				writeString(this.Conglomerado, dos);

				// Integer

				writeInteger(this.Conglomerado_Financeiro, dos);

				// Integer

				writeInteger(this.Conglomerado_Prudencial, dos);

				// String

				writeString(this.TCB, dos);

				// Integer

				writeInteger(this.TC, dos);

				// Integer

				writeInteger(this.TI, dos);

				// String

				writeString(this.Cidade, dos);

				// String

				writeString(this.UF, dos);

				// String

				writeString(this.Data, dos);

				// String

				writeString(this.Disponibilidades__a_, dos);

				// String

				writeString(this.Aplica__es_Interfinanceiras_de_Liquidez__b_, dos);

				// String

				writeString(this.TVM_e_Instrumentos_Financeiros_Derivativos__c_, dos);

				// String

				writeString(this.Opera__es_de_Cr_dito, dos);

				// String

				writeString(this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_, dos);

				// String

				writeString(this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_, dos);

				// String

				writeString(this.Arrendamento_Mercantil, dos);

				// String

				writeString(this.Imobilizado_de_Arrendamento__e2_, dos);

				// String

				writeString(this.Credores_por_Antecipa__o_de_Valor_Residual__e3_, dos);

				// String

				writeString(this.Provis_o_sobre_Arrendamento_Mercantil__e4_, dos);

				// String

				writeString(this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_, dos);

				// String

				writeString(this.Outros_Cr_ditos___L_quido_de_Provis_o__f_, dos);

				// String

				writeString(this.Outros_Ativos_Realiz_veis__g_, dos);

				// String

				writeString(this.Permanente_Ajustado__h_, dos);

				// String

				writeString(this.Column25, dos);

				// String

				writeString(this.Credores_por_Antecipa__o_de_Valor_Residual__j_, dos);

				// String

				writeString(this.Column27, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Institui__o_financeira=" + Institui__o_financeira);
			sb.append(",C_digo=" + String.valueOf(C_digo));
			sb.append(",Conglomerado=" + Conglomerado);
			sb.append(",Conglomerado_Financeiro=" + String.valueOf(Conglomerado_Financeiro));
			sb.append(",Conglomerado_Prudencial=" + String.valueOf(Conglomerado_Prudencial));
			sb.append(",TCB=" + TCB);
			sb.append(",TC=" + String.valueOf(TC));
			sb.append(",TI=" + String.valueOf(TI));
			sb.append(",Cidade=" + Cidade);
			sb.append(",UF=" + UF);
			sb.append(",Data=" + Data);
			sb.append(",Disponibilidades__a_=" + Disponibilidades__a_);
			sb.append(",Aplica__es_Interfinanceiras_de_Liquidez__b_=" + Aplica__es_Interfinanceiras_de_Liquidez__b_);
			sb.append(",TVM_e_Instrumentos_Financeiros_Derivativos__c_="
					+ TVM_e_Instrumentos_Financeiros_Derivativos__c_);
			sb.append(",Opera__es_de_Cr_dito=" + Opera__es_de_Cr_dito);
			sb.append(",Provis_o_sobre_Opera__es_de_Cr_dito__d2_=" + Provis_o_sobre_Opera__es_de_Cr_dito__d2_);
			sb.append(
					",Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_=" + Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_);
			sb.append(",Arrendamento_Mercantil=" + Arrendamento_Mercantil);
			sb.append(",Imobilizado_de_Arrendamento__e2_=" + Imobilizado_de_Arrendamento__e2_);
			sb.append(",Credores_por_Antecipa__o_de_Valor_Residual__e3_="
					+ Credores_por_Antecipa__o_de_Valor_Residual__e3_);
			sb.append(",Provis_o_sobre_Arrendamento_Mercantil__e4_=" + Provis_o_sobre_Arrendamento_Mercantil__e4_);
			sb.append(",Arrendamento_Mercantil_L_quido_de_Provis_o__e_="
					+ Arrendamento_Mercantil_L_quido_de_Provis_o__e_);
			sb.append(",Outros_Cr_ditos___L_quido_de_Provis_o__f_=" + Outros_Cr_ditos___L_quido_de_Provis_o__f_);
			sb.append(",Outros_Ativos_Realiz_veis__g_=" + Outros_Ativos_Realiz_veis__g_);
			sb.append(",Permanente_Ajustado__h_=" + Permanente_Ajustado__h_);
			sb.append(",Column25=" + Column25);
			sb.append(",Credores_por_Antecipa__o_de_Valor_Residual__j_="
					+ Credores_por_Antecipa__o_de_Valor_Residual__j_);
			sb.append(",Column27=" + Column27);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[0];
		static byte[] commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[0];

		public String Institui__o_financeira;

		public String getInstitui__o_financeira() {
			return this.Institui__o_financeira;
		}

		public Integer C_digo;

		public Integer getC_digo() {
			return this.C_digo;
		}

		public String Conglomerado;

		public String getConglomerado() {
			return this.Conglomerado;
		}

		public Integer Conglomerado_Financeiro;

		public Integer getConglomerado_Financeiro() {
			return this.Conglomerado_Financeiro;
		}

		public Integer Conglomerado_Prudencial;

		public Integer getConglomerado_Prudencial() {
			return this.Conglomerado_Prudencial;
		}

		public String TCB;

		public String getTCB() {
			return this.TCB;
		}

		public Integer TC;

		public Integer getTC() {
			return this.TC;
		}

		public Integer TI;

		public Integer getTI() {
			return this.TI;
		}

		public String Cidade;

		public String getCidade() {
			return this.Cidade;
		}

		public String UF;

		public String getUF() {
			return this.UF;
		}

		public String Data;

		public String getData() {
			return this.Data;
		}

		public String Disponibilidades__a_;

		public String getDisponibilidades__a_() {
			return this.Disponibilidades__a_;
		}

		public String Aplica__es_Interfinanceiras_de_Liquidez__b_;

		public String getAplica__es_Interfinanceiras_de_Liquidez__b_() {
			return this.Aplica__es_Interfinanceiras_de_Liquidez__b_;
		}

		public String TVM_e_Instrumentos_Financeiros_Derivativos__c_;

		public String getTVM_e_Instrumentos_Financeiros_Derivativos__c_() {
			return this.TVM_e_Instrumentos_Financeiros_Derivativos__c_;
		}

		public String Opera__es_de_Cr_dito;

		public String getOpera__es_de_Cr_dito() {
			return this.Opera__es_de_Cr_dito;
		}

		public String Provis_o_sobre_Opera__es_de_Cr_dito__d2_;

		public String getProvis_o_sobre_Opera__es_de_Cr_dito__d2_() {
			return this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_;
		}

		public String Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_;

		public String getOpera__es_de_Cr_dito_L_quidas_de_Provis_o__d_() {
			return this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_;
		}

		public String Arrendamento_Mercantil;

		public String getArrendamento_Mercantil() {
			return this.Arrendamento_Mercantil;
		}

		public String Imobilizado_de_Arrendamento__e2_;

		public String getImobilizado_de_Arrendamento__e2_() {
			return this.Imobilizado_de_Arrendamento__e2_;
		}

		public String Credores_por_Antecipa__o_de_Valor_Residual__e3_;

		public String getCredores_por_Antecipa__o_de_Valor_Residual__e3_() {
			return this.Credores_por_Antecipa__o_de_Valor_Residual__e3_;
		}

		public String Provis_o_sobre_Arrendamento_Mercantil__e4_;

		public String getProvis_o_sobre_Arrendamento_Mercantil__e4_() {
			return this.Provis_o_sobre_Arrendamento_Mercantil__e4_;
		}

		public String Arrendamento_Mercantil_L_quido_de_Provis_o__e_;

		public String getArrendamento_Mercantil_L_quido_de_Provis_o__e_() {
			return this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_;
		}

		public String Outros_Cr_ditos___L_quido_de_Provis_o__f_;

		public String getOutros_Cr_ditos___L_quido_de_Provis_o__f_() {
			return this.Outros_Cr_ditos___L_quido_de_Provis_o__f_;
		}

		public String Outros_Ativos_Realiz_veis__g_;

		public String getOutros_Ativos_Realiz_veis__g_() {
			return this.Outros_Ativos_Realiz_veis__g_;
		}

		public String Permanente_Ajustado__h_;

		public String getPermanente_Ajustado__h_() {
			return this.Permanente_Ajustado__h_;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Credores_por_Antecipa__o_de_Valor_Residual__j_;

		public String getCredores_por_Antecipa__o_de_Valor_Residual__j_() {
			return this.Credores_por_Antecipa__o_de_Valor_Residual__j_;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste.length) {
					if (length < 1024 && commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste.length == 0) {
						commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[1024];
					} else {
						commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste, 0, length);
				strReturn = new String(commonByteArray_ETL_RELATORIO_TRANSACIONAL_Teste, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_RELATORIO_TRANSACIONAL_Teste) {

				try {

					int length = 0;

					this.Institui__o_financeira = readString(dis);

					this.C_digo = readInteger(dis);

					this.Conglomerado = readString(dis);

					this.Conglomerado_Financeiro = readInteger(dis);

					this.Conglomerado_Prudencial = readInteger(dis);

					this.TCB = readString(dis);

					this.TC = readInteger(dis);

					this.TI = readInteger(dis);

					this.Cidade = readString(dis);

					this.UF = readString(dis);

					this.Data = readString(dis);

					this.Disponibilidades__a_ = readString(dis);

					this.Aplica__es_Interfinanceiras_de_Liquidez__b_ = readString(dis);

					this.TVM_e_Instrumentos_Financeiros_Derivativos__c_ = readString(dis);

					this.Opera__es_de_Cr_dito = readString(dis);

					this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_ = readString(dis);

					this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_ = readString(dis);

					this.Arrendamento_Mercantil = readString(dis);

					this.Imobilizado_de_Arrendamento__e2_ = readString(dis);

					this.Credores_por_Antecipa__o_de_Valor_Residual__e3_ = readString(dis);

					this.Provis_o_sobre_Arrendamento_Mercantil__e4_ = readString(dis);

					this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_ = readString(dis);

					this.Outros_Cr_ditos___L_quido_de_Provis_o__f_ = readString(dis);

					this.Outros_Ativos_Realiz_veis__g_ = readString(dis);

					this.Permanente_Ajustado__h_ = readString(dis);

					this.Column25 = readString(dis);

					this.Credores_por_Antecipa__o_de_Valor_Residual__j_ = readString(dis);

					this.Column27 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Institui__o_financeira, dos);

				// Integer

				writeInteger(this.C_digo, dos);

				// String

				writeString(this.Conglomerado, dos);

				// Integer

				writeInteger(this.Conglomerado_Financeiro, dos);

				// Integer

				writeInteger(this.Conglomerado_Prudencial, dos);

				// String

				writeString(this.TCB, dos);

				// Integer

				writeInteger(this.TC, dos);

				// Integer

				writeInteger(this.TI, dos);

				// String

				writeString(this.Cidade, dos);

				// String

				writeString(this.UF, dos);

				// String

				writeString(this.Data, dos);

				// String

				writeString(this.Disponibilidades__a_, dos);

				// String

				writeString(this.Aplica__es_Interfinanceiras_de_Liquidez__b_, dos);

				// String

				writeString(this.TVM_e_Instrumentos_Financeiros_Derivativos__c_, dos);

				// String

				writeString(this.Opera__es_de_Cr_dito, dos);

				// String

				writeString(this.Provis_o_sobre_Opera__es_de_Cr_dito__d2_, dos);

				// String

				writeString(this.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_, dos);

				// String

				writeString(this.Arrendamento_Mercantil, dos);

				// String

				writeString(this.Imobilizado_de_Arrendamento__e2_, dos);

				// String

				writeString(this.Credores_por_Antecipa__o_de_Valor_Residual__e3_, dos);

				// String

				writeString(this.Provis_o_sobre_Arrendamento_Mercantil__e4_, dos);

				// String

				writeString(this.Arrendamento_Mercantil_L_quido_de_Provis_o__e_, dos);

				// String

				writeString(this.Outros_Cr_ditos___L_quido_de_Provis_o__f_, dos);

				// String

				writeString(this.Outros_Ativos_Realiz_veis__g_, dos);

				// String

				writeString(this.Permanente_Ajustado__h_, dos);

				// String

				writeString(this.Column25, dos);

				// String

				writeString(this.Credores_por_Antecipa__o_de_Valor_Residual__j_, dos);

				// String

				writeString(this.Column27, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Institui__o_financeira=" + Institui__o_financeira);
			sb.append(",C_digo=" + String.valueOf(C_digo));
			sb.append(",Conglomerado=" + Conglomerado);
			sb.append(",Conglomerado_Financeiro=" + String.valueOf(Conglomerado_Financeiro));
			sb.append(",Conglomerado_Prudencial=" + String.valueOf(Conglomerado_Prudencial));
			sb.append(",TCB=" + TCB);
			sb.append(",TC=" + String.valueOf(TC));
			sb.append(",TI=" + String.valueOf(TI));
			sb.append(",Cidade=" + Cidade);
			sb.append(",UF=" + UF);
			sb.append(",Data=" + Data);
			sb.append(",Disponibilidades__a_=" + Disponibilidades__a_);
			sb.append(",Aplica__es_Interfinanceiras_de_Liquidez__b_=" + Aplica__es_Interfinanceiras_de_Liquidez__b_);
			sb.append(",TVM_e_Instrumentos_Financeiros_Derivativos__c_="
					+ TVM_e_Instrumentos_Financeiros_Derivativos__c_);
			sb.append(",Opera__es_de_Cr_dito=" + Opera__es_de_Cr_dito);
			sb.append(",Provis_o_sobre_Opera__es_de_Cr_dito__d2_=" + Provis_o_sobre_Opera__es_de_Cr_dito__d2_);
			sb.append(
					",Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_=" + Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_);
			sb.append(",Arrendamento_Mercantil=" + Arrendamento_Mercantil);
			sb.append(",Imobilizado_de_Arrendamento__e2_=" + Imobilizado_de_Arrendamento__e2_);
			sb.append(",Credores_por_Antecipa__o_de_Valor_Residual__e3_="
					+ Credores_por_Antecipa__o_de_Valor_Residual__e3_);
			sb.append(",Provis_o_sobre_Arrendamento_Mercantil__e4_=" + Provis_o_sobre_Arrendamento_Mercantil__e4_);
			sb.append(",Arrendamento_Mercantil_L_quido_de_Provis_o__e_="
					+ Arrendamento_Mercantil_L_quido_de_Provis_o__e_);
			sb.append(",Outros_Cr_ditos___L_quido_de_Provis_o__f_=" + Outros_Cr_ditos___L_quido_de_Provis_o__f_);
			sb.append(",Outros_Ativos_Realiz_veis__g_=" + Outros_Ativos_Realiz_veis__g_);
			sb.append(",Permanente_Ajustado__h_=" + Permanente_Ajustado__h_);
			sb.append(",Column25=" + Column25);
			sb.append(",Credores_por_Antecipa__o_de_Valor_Residual__j_="
					+ Credores_por_Antecipa__o_de_Valor_Residual__j_);
			sb.append(",Column27=" + Column27);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tFileOutputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileOutputJSON_1", false);
				start_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileOutputJSON_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tFileOutputJSON_1 = 0;

				int nb_line_tFileOutputJSON_1 = 0;
				java.io.File file_tFileOutputJSON_1 = new java.io.File("C:/Teste/out.json");
				java.io.File dir_tFileOutputJSON_1 = file_tFileOutputJSON_1.getParentFile();
				if (dir_tFileOutputJSON_1 != null && !dir_tFileOutputJSON_1.exists()) {
					dir_tFileOutputJSON_1.mkdirs();
				}
				java.io.PrintWriter outtFileOutputJSON_1 = new java.io.PrintWriter(
						new java.io.BufferedWriter(new java.io.FileWriter("C:/Teste/out.json")));
				outtFileOutputJSON_1.append("{\"" + "teste" + "\":[");
				boolean isFirst_tFileOutputJSON_1 = true;

				/**
				 * [tFileOutputJSON_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Institui__o_financeira;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Institui__o_financeira == null) ? 0
									: this.Institui__o_financeira.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.Institui__o_financeira == null) {
							if (other.Institui__o_financeira != null)
								return false;

						} else if (!this.Institui__o_financeira.equals(other.Institui__o_financeira))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_1.setEncoding("ISO-8859-7");

				Object source_tFileInputExcel_1 = "D:/Users/itrindade/Downloads/arquivo.xls";
				final jxl.Workbook workbook_tFileInputExcel_1;

				java.io.InputStream toClose_tFileInputExcel_1 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_1 = null;
				try {
					if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_1 = (java.io.InputStream) source_tFileInputExcel_1;
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else if (source_tFileInputExcel_1 instanceof String) {
						toClose_tFileInputExcel_1 = new java.io.FileInputStream(source_tFileInputExcel_1.toString());
						buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
						workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1,
								workbookSettings_tFileInputExcel_1);
					} else {
						workbook_tFileInputExcel_1 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_1 != null) {
							buffIStreamtFileInputExcel_1.close();
						}
					} catch (Exception e) {
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = java.util.Arrays.<jxl.Sheet>asList(
							workbook_tFileInputExcel_1.getSheets());
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += sheet_tFileInputExcel_1.getRows();
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_1 = null;
						jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRows();
							}
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getName());
							row1 = null;
							int tempRowLength_tFileInputExcel_1 = 28;

							int columnIndex_tFileInputExcel_1 = 0;

//
//end%>

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > row_tFileInputExcel_1.length
									? row_tFileInputExcel_1.length
									: end_column_tFileInputExcel_1;

							java.util.TimeZone zone_tFileInputExcel_1 = java.util.TimeZone.getTimeZone("GMT");
							java.text.SimpleDateFormat sdf_tFileInputExcel_1 = new java.text.SimpleDateFormat(
									"dd-MM-yyyy");
							sdf_tFileInputExcel_1.setTimeZone(zone_tFileInputExcel_1);

							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {

								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {

									jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i
											+ start_column_tFileInputExcel_1];
									temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getContents();

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Institui__o_financeira";
									row1.Institui__o_financeira = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Institui__o_financeira = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "C_digo";
									row1.C_digo = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row1.C_digo = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Conglomerado";
									row1.Conglomerado = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Conglomerado = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Conglomerado_Financeiro";
									row1.Conglomerado_Financeiro = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row1.Conglomerado_Financeiro = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Conglomerado_Prudencial";
									row1.Conglomerado_Prudencial = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row1.Conglomerado_Prudencial = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "TCB";
									row1.TCB = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.TCB = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "TC";
									row1.TC = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row1.TC = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "TI";
									row1.TI = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
								} else {
									row1.TI = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Cidade";
									row1.Cidade = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Cidade = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "UF";
									row1.UF = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.UF = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Data";
									row1.Data = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Data = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Disponibilidades__a_";
									row1.Disponibilidades__a_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Disponibilidades__a_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 12;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Aplica__es_Interfinanceiras_de_Liquidez__b_";
									row1.Aplica__es_Interfinanceiras_de_Liquidez__b_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Aplica__es_Interfinanceiras_de_Liquidez__b_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 13;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "TVM_e_Instrumentos_Financeiros_Derivativos__c_";
									row1.TVM_e_Instrumentos_Financeiros_Derivativos__c_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.TVM_e_Instrumentos_Financeiros_Derivativos__c_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 14;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Opera__es_de_Cr_dito";
									row1.Opera__es_de_Cr_dito = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Opera__es_de_Cr_dito = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 15;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Provis_o_sobre_Opera__es_de_Cr_dito__d2_";
									row1.Provis_o_sobre_Opera__es_de_Cr_dito__d2_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Provis_o_sobre_Opera__es_de_Cr_dito__d2_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 16;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_";
									row1.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 17;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Arrendamento_Mercantil";
									row1.Arrendamento_Mercantil = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Arrendamento_Mercantil = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 18;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Imobilizado_de_Arrendamento__e2_";
									row1.Imobilizado_de_Arrendamento__e2_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Imobilizado_de_Arrendamento__e2_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 19;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Credores_por_Antecipa__o_de_Valor_Residual__e3_";
									row1.Credores_por_Antecipa__o_de_Valor_Residual__e3_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Credores_por_Antecipa__o_de_Valor_Residual__e3_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 20;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Provis_o_sobre_Arrendamento_Mercantil__e4_";
									row1.Provis_o_sobre_Arrendamento_Mercantil__e4_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Provis_o_sobre_Arrendamento_Mercantil__e4_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 21;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Arrendamento_Mercantil_L_quido_de_Provis_o__e_";
									row1.Arrendamento_Mercantil_L_quido_de_Provis_o__e_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Arrendamento_Mercantil_L_quido_de_Provis_o__e_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 22;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Outros_Cr_ditos___L_quido_de_Provis_o__f_";
									row1.Outros_Cr_ditos___L_quido_de_Provis_o__f_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Outros_Cr_ditos___L_quido_de_Provis_o__f_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 23;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Outros_Ativos_Realiz_veis__g_";
									row1.Outros_Ativos_Realiz_veis__g_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Outros_Ativos_Realiz_veis__g_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 24;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Permanente_Ajustado__h_";
									row1.Permanente_Ajustado__h_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Permanente_Ajustado__h_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 25;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Column25";
									row1.Column25 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Column25 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 26;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Credores_por_Antecipa__o_de_Valor_Residual__j_";
									row1.Credores_por_Antecipa__o_de_Valor_Residual__j_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Credores_por_Antecipa__o_de_Valor_Residual__j_ = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 27;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Column27";
									row1.Column27 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Column27 = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tUniqRow_1 main ] start
								 */

								currentComponent = "tUniqRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
								}

								row2 = null;
								if (row1.Institui__o_financeira == null) {
									finder_tUniqRow_1.Institui__o_financeira = null;
								} else {
									finder_tUniqRow_1.Institui__o_financeira = row1.Institui__o_financeira
											.toLowerCase();
								}
								finder_tUniqRow_1.hashCodeDirty = true;
								if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
									KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

									if (row1.Institui__o_financeira == null) {
										new_tUniqRow_1.Institui__o_financeira = null;
									} else {
										new_tUniqRow_1.Institui__o_financeira = row1.Institui__o_financeira
												.toLowerCase();
									}

									keystUniqRow_1.add(new_tUniqRow_1);
									if (row2 == null) {

										row2 = new row2Struct();
									}
									row2.Institui__o_financeira = row1.Institui__o_financeira;
									row2.C_digo = row1.C_digo;
									row2.Conglomerado = row1.Conglomerado;
									row2.Conglomerado_Financeiro = row1.Conglomerado_Financeiro;
									row2.Conglomerado_Prudencial = row1.Conglomerado_Prudencial;
									row2.TCB = row1.TCB;
									row2.TC = row1.TC;
									row2.TI = row1.TI;
									row2.Cidade = row1.Cidade;
									row2.UF = row1.UF;
									row2.Data = row1.Data;
									row2.Disponibilidades__a_ = row1.Disponibilidades__a_;
									row2.Aplica__es_Interfinanceiras_de_Liquidez__b_ = row1.Aplica__es_Interfinanceiras_de_Liquidez__b_;
									row2.TVM_e_Instrumentos_Financeiros_Derivativos__c_ = row1.TVM_e_Instrumentos_Financeiros_Derivativos__c_;
									row2.Opera__es_de_Cr_dito = row1.Opera__es_de_Cr_dito;
									row2.Provis_o_sobre_Opera__es_de_Cr_dito__d2_ = row1.Provis_o_sobre_Opera__es_de_Cr_dito__d2_;
									row2.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_ = row1.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_;
									row2.Arrendamento_Mercantil = row1.Arrendamento_Mercantil;
									row2.Imobilizado_de_Arrendamento__e2_ = row1.Imobilizado_de_Arrendamento__e2_;
									row2.Credores_por_Antecipa__o_de_Valor_Residual__e3_ = row1.Credores_por_Antecipa__o_de_Valor_Residual__e3_;
									row2.Provis_o_sobre_Arrendamento_Mercantil__e4_ = row1.Provis_o_sobre_Arrendamento_Mercantil__e4_;
									row2.Arrendamento_Mercantil_L_quido_de_Provis_o__e_ = row1.Arrendamento_Mercantil_L_quido_de_Provis_o__e_;
									row2.Outros_Cr_ditos___L_quido_de_Provis_o__f_ = row1.Outros_Cr_ditos___L_quido_de_Provis_o__f_;
									row2.Outros_Ativos_Realiz_veis__g_ = row1.Outros_Ativos_Realiz_veis__g_;
									row2.Permanente_Ajustado__h_ = row1.Permanente_Ajustado__h_;
									row2.Column25 = row1.Column25;
									row2.Credores_por_Antecipa__o_de_Valor_Residual__j_ = row1.Credores_por_Antecipa__o_de_Valor_Residual__j_;
									row2.Column27 = row1.Column27;
									nb_uniques_tUniqRow_1++;
								} else {
									nb_duplicates_tUniqRow_1++;
								}

								tos_count_tUniqRow_1++;

								/**
								 * [tUniqRow_1 main ] stop
								 */

								/**
								 * [tUniqRow_1 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_begin ] stop
								 */
// Start of branch "row2"
								if (row2 != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										out1 = null;

// # Output table : 'out1'
// # Filter conditions 
										if (

										!Relational.ISNULL(row1.Institui__o_financeira)

										) {
											out1_tmp.Institui__o_financeira = row1.Institui__o_financeira;
											out1_tmp.C_digo = row1.C_digo;
											out1_tmp.Conglomerado = row1.Conglomerado;
											out1_tmp.Conglomerado_Financeiro = row1.Conglomerado_Financeiro;
											out1_tmp.Conglomerado_Prudencial = row1.Conglomerado_Prudencial;
											out1_tmp.TCB = row1.TCB;
											out1_tmp.TC = row1.TC;
											out1_tmp.TI = row1.TI;
											out1_tmp.Cidade = row1.Cidade;
											out1_tmp.UF = row1.UF;
											out1_tmp.Data = row1.Data;
											out1_tmp.Disponibilidades__a_ = row1.Disponibilidades__a_;
											out1_tmp.Aplica__es_Interfinanceiras_de_Liquidez__b_ = row1.Aplica__es_Interfinanceiras_de_Liquidez__b_;
											out1_tmp.TVM_e_Instrumentos_Financeiros_Derivativos__c_ = row1.TVM_e_Instrumentos_Financeiros_Derivativos__c_;
											out1_tmp.Opera__es_de_Cr_dito = row1.Opera__es_de_Cr_dito;
											out1_tmp.Provis_o_sobre_Opera__es_de_Cr_dito__d2_ = row1.Provis_o_sobre_Opera__es_de_Cr_dito__d2_;
											out1_tmp.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_ = row1.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_;
											out1_tmp.Arrendamento_Mercantil = row1.Arrendamento_Mercantil;
											out1_tmp.Imobilizado_de_Arrendamento__e2_ = row1.Imobilizado_de_Arrendamento__e2_;
											out1_tmp.Credores_por_Antecipa__o_de_Valor_Residual__e3_ = row1.Credores_por_Antecipa__o_de_Valor_Residual__e3_;
											out1_tmp.Provis_o_sobre_Arrendamento_Mercantil__e4_ = row1.Provis_o_sobre_Arrendamento_Mercantil__e4_;
											out1_tmp.Arrendamento_Mercantil_L_quido_de_Provis_o__e_ = row1.Arrendamento_Mercantil_L_quido_de_Provis_o__e_;
											out1_tmp.Outros_Cr_ditos___L_quido_de_Provis_o__f_ = row1.Outros_Cr_ditos___L_quido_de_Provis_o__f_;
											out1_tmp.Outros_Ativos_Realiz_veis__g_ = row1.Outros_Ativos_Realiz_veis__g_;
											out1_tmp.Permanente_Ajustado__h_ = row1.Permanente_Ajustado__h_;
											out1_tmp.Column25 = row1.Column25;
											out1_tmp.Credores_por_Antecipa__o_de_Valor_Residual__j_ = row1.Credores_por_Antecipa__o_de_Valor_Residual__j_;
											out1_tmp.Column27 = row1.Column27;
											out1 = out1_tmp;
										} // closing filter/reject
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */

									/**
									 * [tMap_1 process_data_begin ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_begin ] stop
									 */
// Start of branch "out1"
									if (out1 != null) {

										/**
										 * [tFileOutputJSON_1 main ] start
										 */

										currentComponent = "tFileOutputJSON_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
										}

										org.json.simple.JSONObject jsonRowtFileOutputJSON_1 = new org.json.simple.JSONObject();
										if (out1.Institui__o_financeira != null) {

											jsonRowtFileOutputJSON_1.put("Institui__o_financeira",
													out1.Institui__o_financeira);

										} else {
											jsonRowtFileOutputJSON_1.put("Institui__o_financeira", null);
										}

										if (out1.C_digo != null) {

											jsonRowtFileOutputJSON_1.put("C_digo", out1.C_digo);

										} else {
											jsonRowtFileOutputJSON_1.put("C_digo", null);
										}

										if (out1.Conglomerado != null) {

											jsonRowtFileOutputJSON_1.put("Conglomerado", out1.Conglomerado);

										} else {
											jsonRowtFileOutputJSON_1.put("Conglomerado", null);
										}

										if (out1.Conglomerado_Financeiro != null) {

											jsonRowtFileOutputJSON_1.put("Conglomerado_Financeiro",
													out1.Conglomerado_Financeiro);

										} else {
											jsonRowtFileOutputJSON_1.put("Conglomerado_Financeiro", null);
										}

										if (out1.Conglomerado_Prudencial != null) {

											jsonRowtFileOutputJSON_1.put("Conglomerado_Prudencial",
													out1.Conglomerado_Prudencial);

										} else {
											jsonRowtFileOutputJSON_1.put("Conglomerado_Prudencial", null);
										}

										if (out1.TCB != null) {

											jsonRowtFileOutputJSON_1.put("TCB", out1.TCB);

										} else {
											jsonRowtFileOutputJSON_1.put("TCB", null);
										}

										if (out1.TC != null) {

											jsonRowtFileOutputJSON_1.put("TC", out1.TC);

										} else {
											jsonRowtFileOutputJSON_1.put("TC", null);
										}

										if (out1.TI != null) {

											jsonRowtFileOutputJSON_1.put("TI", out1.TI);

										} else {
											jsonRowtFileOutputJSON_1.put("TI", null);
										}

										if (out1.Cidade != null) {

											jsonRowtFileOutputJSON_1.put("Cidade", out1.Cidade);

										} else {
											jsonRowtFileOutputJSON_1.put("Cidade", null);
										}

										if (out1.UF != null) {

											jsonRowtFileOutputJSON_1.put("UF", out1.UF);

										} else {
											jsonRowtFileOutputJSON_1.put("UF", null);
										}

										if (out1.Data != null) {

											jsonRowtFileOutputJSON_1.put("Data", out1.Data);

										} else {
											jsonRowtFileOutputJSON_1.put("Data", null);
										}

										if (out1.Disponibilidades__a_ != null) {

											jsonRowtFileOutputJSON_1.put("Disponibilidades__a_",
													out1.Disponibilidades__a_);

										} else {
											jsonRowtFileOutputJSON_1.put("Disponibilidades__a_", null);
										}

										if (out1.Aplica__es_Interfinanceiras_de_Liquidez__b_ != null) {

											jsonRowtFileOutputJSON_1.put("Aplica__es_Interfinanceiras_de_Liquidez__b_",
													out1.Aplica__es_Interfinanceiras_de_Liquidez__b_);

										} else {
											jsonRowtFileOutputJSON_1.put("Aplica__es_Interfinanceiras_de_Liquidez__b_",
													null);
										}

										if (out1.TVM_e_Instrumentos_Financeiros_Derivativos__c_ != null) {

											jsonRowtFileOutputJSON_1.put(
													"TVM_e_Instrumentos_Financeiros_Derivativos__c_",
													out1.TVM_e_Instrumentos_Financeiros_Derivativos__c_);

										} else {
											jsonRowtFileOutputJSON_1
													.put("TVM_e_Instrumentos_Financeiros_Derivativos__c_", null);
										}

										if (out1.Opera__es_de_Cr_dito != null) {

											jsonRowtFileOutputJSON_1.put("Opera__es_de_Cr_dito",
													out1.Opera__es_de_Cr_dito);

										} else {
											jsonRowtFileOutputJSON_1.put("Opera__es_de_Cr_dito", null);
										}

										if (out1.Provis_o_sobre_Opera__es_de_Cr_dito__d2_ != null) {

											jsonRowtFileOutputJSON_1.put("Provis_o_sobre_Opera__es_de_Cr_dito__d2_",
													out1.Provis_o_sobre_Opera__es_de_Cr_dito__d2_);

										} else {
											jsonRowtFileOutputJSON_1.put("Provis_o_sobre_Opera__es_de_Cr_dito__d2_",
													null);
										}

										if (out1.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_ != null) {

											jsonRowtFileOutputJSON_1.put(
													"Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_",
													out1.Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_);

										} else {
											jsonRowtFileOutputJSON_1
													.put("Opera__es_de_Cr_dito_L_quidas_de_Provis_o__d_", null);
										}

										if (out1.Arrendamento_Mercantil != null) {

											jsonRowtFileOutputJSON_1.put("Arrendamento_Mercantil",
													out1.Arrendamento_Mercantil);

										} else {
											jsonRowtFileOutputJSON_1.put("Arrendamento_Mercantil", null);
										}

										if (out1.Imobilizado_de_Arrendamento__e2_ != null) {

											jsonRowtFileOutputJSON_1.put("Imobilizado_de_Arrendamento__e2_",
													out1.Imobilizado_de_Arrendamento__e2_);

										} else {
											jsonRowtFileOutputJSON_1.put("Imobilizado_de_Arrendamento__e2_", null);
										}

										if (out1.Credores_por_Antecipa__o_de_Valor_Residual__e3_ != null) {

											jsonRowtFileOutputJSON_1.put(
													"Credores_por_Antecipa__o_de_Valor_Residual__e3_",
													out1.Credores_por_Antecipa__o_de_Valor_Residual__e3_);

										} else {
											jsonRowtFileOutputJSON_1
													.put("Credores_por_Antecipa__o_de_Valor_Residual__e3_", null);
										}

										if (out1.Provis_o_sobre_Arrendamento_Mercantil__e4_ != null) {

											jsonRowtFileOutputJSON_1.put("Provis_o_sobre_Arrendamento_Mercantil__e4_",
													out1.Provis_o_sobre_Arrendamento_Mercantil__e4_);

										} else {
											jsonRowtFileOutputJSON_1.put("Provis_o_sobre_Arrendamento_Mercantil__e4_",
													null);
										}

										if (out1.Arrendamento_Mercantil_L_quido_de_Provis_o__e_ != null) {

											jsonRowtFileOutputJSON_1.put(
													"Arrendamento_Mercantil_L_quido_de_Provis_o__e_",
													out1.Arrendamento_Mercantil_L_quido_de_Provis_o__e_);

										} else {
											jsonRowtFileOutputJSON_1
													.put("Arrendamento_Mercantil_L_quido_de_Provis_o__e_", null);
										}

										if (out1.Outros_Cr_ditos___L_quido_de_Provis_o__f_ != null) {

											jsonRowtFileOutputJSON_1.put("Outros_Cr_ditos___L_quido_de_Provis_o__f_",
													out1.Outros_Cr_ditos___L_quido_de_Provis_o__f_);

										} else {
											jsonRowtFileOutputJSON_1.put("Outros_Cr_ditos___L_quido_de_Provis_o__f_",
													null);
										}

										if (out1.Outros_Ativos_Realiz_veis__g_ != null) {

											jsonRowtFileOutputJSON_1.put("Outros_Ativos_Realiz_veis__g_",
													out1.Outros_Ativos_Realiz_veis__g_);

										} else {
											jsonRowtFileOutputJSON_1.put("Outros_Ativos_Realiz_veis__g_", null);
										}

										if (out1.Permanente_Ajustado__h_ != null) {

											jsonRowtFileOutputJSON_1.put("Permanente_Ajustado__h_",
													out1.Permanente_Ajustado__h_);

										} else {
											jsonRowtFileOutputJSON_1.put("Permanente_Ajustado__h_", null);
										}

										if (out1.Column25 != null) {

											jsonRowtFileOutputJSON_1.put("Column25", out1.Column25);

										} else {
											jsonRowtFileOutputJSON_1.put("Column25", null);
										}

										if (out1.Credores_por_Antecipa__o_de_Valor_Residual__j_ != null) {

											jsonRowtFileOutputJSON_1.put(
													"Credores_por_Antecipa__o_de_Valor_Residual__j_",
													out1.Credores_por_Antecipa__o_de_Valor_Residual__j_);

										} else {
											jsonRowtFileOutputJSON_1
													.put("Credores_por_Antecipa__o_de_Valor_Residual__j_", null);
										}

										if (out1.Column27 != null) {

											jsonRowtFileOutputJSON_1.put("Column27", out1.Column27);

										} else {
											jsonRowtFileOutputJSON_1.put("Column27", null);
										}

										if (!isFirst_tFileOutputJSON_1) {
											outtFileOutputJSON_1.append(",");
										}
										isFirst_tFileOutputJSON_1 = false;
										outtFileOutputJSON_1.append(jsonRowtFileOutputJSON_1.toJSONString());
										nb_line_tFileOutputJSON_1++;

										tos_count_tFileOutputJSON_1++;

										/**
										 * [tFileOutputJSON_1 main ] stop
										 */

										/**
										 * [tFileOutputJSON_1 process_data_begin ] start
										 */

										currentComponent = "tFileOutputJSON_1";

										/**
										 * [tFileOutputJSON_1 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputJSON_1 process_data_end ] start
										 */

										currentComponent = "tFileOutputJSON_1";

										/**
										 * [tFileOutputJSON_1 process_data_end ] stop
										 */

									} // End of branch "out1"

									/**
									 * [tMap_1 process_data_end ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_end ] stop
									 */

								} // End of branch "row2"

								/**
								 * [tUniqRow_1 process_data_end ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.close();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputJSON_1 end ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				outtFileOutputJSON_1.print("]}");
				outtFileOutputJSON_1.close();
				globalMap.put("tFileOutputJSON_1_NB_LINE", nb_line_tFileOutputJSON_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tFileOutputJSON_1", true);
				end_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileOutputJSON_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputJSON_1 finally ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				/**
				 * [tFileOutputJSON_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Teste TesteClass = new Teste();

		int exitCode = TesteClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Teste.class.getClassLoader()
					.getResourceAsStream("etl_relatorio_transacional/teste_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Teste.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Teste");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 110675 characters generated by Talend Open Studio for ESB on the January 14,
 * 2021 12:40:32 PM BRST
 ************************************************************************************************/